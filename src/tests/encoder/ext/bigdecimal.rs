use std::str::FromStr;

use bigdecimal::BigDecimal;

assert_numeric!(numeric_1_0, Some(BigDecimal::from_str("1.0").unwrap()), vec![
    0x00, 0x00, 0x00, 0x0a,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, // 1.0
]);

assert_numeric!(numeric_0_5, Some(BigDecimal::from_str("0.5").unwrap()), vec![
        0x00, 0x00, 0x00, 0x0a,
        0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0x13, 0x88, // 0.5
]);

assert_numeric!(numeric_0_25, Some(BigDecimal::from_str("0.25").unwrap()), vec![
    0x00, 0x00, 0x00, 0x0a,
    0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x02, 0x09, 0xc4, // 0.25
]);

assert_numeric!(numeric_50_0, Some(BigDecimal::from_str("50.00000").unwrap()), vec![
    0x00, 0x00, 0x00, 0x0a,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x32, // 50.0
]);

assert_numeric!(numeric_0_001, Some(BigDecimal::from_str("0.001").unwrap()), vec![
    0x00, 0x00, 0x00, 0x0a,
    0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0a, // 0.001
]);

assert_numeric!(numeric_12_34, Some(BigDecimal::from_str("12.34").unwrap()), vec![
    0x00, 0x00, 0x00, 0x0c,
    0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0c, 0x0d, 0x48, // 12.34
]);

assert_numeric!(numeric_0_15625, Some(BigDecimal::from_str("0.15625").unwrap()), vec![
    0x00, 0x00, 0x00, 0x0c,
    0x00, 0x02, 0xff, 0xff, 0x00, 0x00, 0x00, 0x05, 0x06, 0x1a, 0x13, 0x88, // 0.15625
]);

assert_numeric!(numeric_3_141593, Some(BigDecimal::from_str("3.141593").unwrap()), vec![
    0x00, 0x00, 0x00, 0x0e,
    0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x03, 0x05, 0x87, 0x24, 0x54, // 3.141593
]);

assert_numeric!(numeric_0_0, Some(BigDecimal::from_str("0.0").unwrap()), vec![
    0x00, 0x00, 0x00, 0x08,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0
]);

assert_numeric!(numeric_minus_1, Some(BigDecimal::from_str("-1").unwrap()), vec![
    0x00, 0x00, 0x00, 0x0a,
    0x00, 0x01, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, // -1
]);

assert_numeric!(numeric_minus_0_5, Some(BigDecimal::from_str("-0.5").unwrap()), vec![
    0x00, 0x00, 0x00, 0x0a,
    0x00, 0x01, 0xff, 0xff, 0x40, 0x00, 0x00, 0x01, 0x13, 0x88, // - 0.5
]);

assert_numeric!(numeric_nan, None::<BigDecimal>, vec![
    0x00, 0x00, 0x00, 0x08,
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, // NaN
]);
